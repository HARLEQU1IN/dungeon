use input_macro::input;
use indoc::indoc;

#[derive(Clone, Copy)]
pub enum Block {
    Wall,
    Air,
}

use Block::*;

pub const HEIGHT: usize = 11;
pub const WIDTH: usize = 11;
pub const PATTERNS: [&str; 13] = [
    indoc!{ r#"
        ╔════════════════════════╗
        ║````````````````````````║
        ║````````````````````````║
        ║````````````````````````║
        ║````````````````````````║
        ║____````````````````````║
        ║    |:``````````````````║
        ║____|:``````````````````║
        ║````````````````````````║
        ║````````````````````````║
        ║````````````````````````║
        ║````````````````````````║
        ║````````````````````````║
        ╚════════════════════════╝"#
    },
    indoc! { r#"
        ╔════════════════════════╗
        ║````````````````````````║
        ║````````````````````````║
        ║````````````````````````║
        ║````````````````````````║
        ║````````````````````____║
        ║``````````````````:|    ║
        ║``````````````````:|____║
        ║````````````````````````║
        ║````````````````````````║
        ║````````````````````````║
        ║````````````````````````║
        ║````````````````````````║
        ╚════════════════════════╝"#
    },
    indoc!{r#"
        ╔════════════════════════╗
        ║````````````````````````║
        ║````````````````````````║
        ║````````````````````````║
        ║````````````````````````║
        ║`````____```````````````║
        ║````|    |:`````````````║
        ║````|____|:`````````````║
        ║````````````````````````║
        ║````````````````````````║
        ║````````````````````````║
        ║````````````````````````║
        ║````````````````````````║
        ╚════════════════════════╝"#
},
    indoc!{r#"
        ╔════════════════════════╗
        ║````````````````````````║
        ║````````````````````````║
        ║````````````````````````║
        ║````````````````````````║
        ║```````````````____`````║
        ║`````````````:|    |````║
        ║`````````````:|____|````║
        ║````````````````````````║
        ║````````````````````````║
        ║````````````````````````║
        ║````````````````````````║
        ║````````````````````````║
        ╚════════════════════════╝"#
},
indoc!{r#"
        ╔════════════════════════╗
        ║````````````````````````║
        ║````````````````````````║
        ║````````````````````````║
        ║````````````````````````║
        ║``````````____``````````║
        ║`````````|    |`````````║
        ║`````````|____|`````````║
        ║````````````````````````║
        ║````````````````````````║
        ║````````````````````````║
        ║````````````````````````║
        ║````````````````````````║
        ╚════════════════════════╝"#
},
    indoc!{r#"
        ╔════════════════════════╗
        ║````````````````````````║
        ║````````````````````````║
        ║````````````````````````║
        ║_______.````````````````║
        ║       |'.``````````````║
        ║       | |``````````````║
        ║       | |``````````````║
        ║_______|.'``````````````║
        ║````````````````````````║
        ║````````````````````````║
        ║````````````````````````║
        ║````````````````````````║
        ╚════════════════════════╝"#
},
    indoc!{r#"
        ╔════════════════════════╗
        ║````````````````````````║
        ║````````````````````````║
        ║````````````````````````║
        ║````````````````._______║
        ║``````````````.'|       ║
        ║``````````````| |       ║
        ║``````````````| |       ║
        ║``````````````'.|_______║
        ║````````````````````````║
        ║````````````````````````║
        ║````````````````````````║
        ║````````````````````````║
        ╚════════════════════════╝"#
},
    indoc!{r#"
        ╔════════════════════════╗
        ║````````````````````````║
        ║````````````````````````║
        ║````````````````````````║
        ║````````________````````║
        ║```````|        |```````║
        ║```````|        |```````║
        ║```````|        |```````║
        ║```````|________|```````║
        ║````````````````````````║
        ║````````````````````````║
        ║````````````````````````║
        ║````````````````````````║
        ╚════════════════════════╝"#
},
    indoc!{r#"
        ╔════════════════════════╗
        ║````````````````````````║
        ║___`````````````````````║
        ║   |'.``````````````````║
        ║   |  '.````````````````║
        ║   |   |````````````````║
        ║   |   |````````````````║
        ║   |   |````````````````║
        ║   |   |````````````````║
        ║   |  .'````````````````║
        ║___|.'``````````````````║
        ║````````````````````````║
        ║````````````````````````║
        ╚════════════════════════╝"#
},
    indoc!{r#"
        ╔════════════════════════╗
        ║````````````````````````║
        ║`````````````````````___║
        ║``````````````````.'|   ║
        ║````````````````.'  |   ║
        ║````````````````|   |   ║
        ║````````````````|   |   ║
        ║````````````````|   |   ║
        ║````````````````|   |   ║
        ║````````````````'.  |   ║
        ║``````````````````'.|___║
        ║````````````````````````║
        ║````````````````````````║
        ╚════════════════════════╝"#
},
    indoc!{r#"
        ╔════════════════════════╗
        ║````````````````````````║
        ║````________________````║
        ║```|                |```║
        ║```|                |```║
        ║```|                |```║
        ║```|                |```║
        ║```|                |```║
        ║```|                |```║
        ║```|                |```║
        ║```|________________|```║
        ║````````````````````````║
        ║````````````````````````║
        ╚════════════════════════╝"#
},
    indoc!{r#"
        ╔════════════════════════╗
        ║'.``````````````````````║
        ║  '.````````````````````║
        ║   |````````````````````║
        ║   |````````````````````║
        ║   |````````````````````║
        ║   |````````````````````║
        ║   |````````````````````║
        ║   |````````````````````║
        ║   |````````````````````║
        ║   |````````````````````║
        ║  .'````````````````````║
        ║.'``````````````````````║
        ╚════════════════════════╝"#
},
    indoc!{r#"
        ╔════════════════════════╗
        ║``````````````````````.'║
        ║````````````````````.'  ║
        ║````````````````````|   ║
        ║````````````````````|   ║
        ║````````````````````|   ║
        ║````````````````````|   ║
        ║````````````````````|   ║
        ║````````````````````|   ║
        ║````````````````````|   ║
        ║````````````````````|   ║
        ║````````````````````'.  ║
        ║``````````````````````'.║
        ╚════════════════════════╝"#
},
];
pub static MAP: [[Block; 11]; 11] = [
    [
        Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall,
    ],
    [Wall, Air, Air, Wall, Air, Air, Wall, Air, Air, Wall, Wall],
    [Wall, Air, Wall, Wall, Air, Air, Air, Air, Wall, Wall, Wall],
    [Wall, Air, Air, Air, Air, Wall, Air, Air, Air, Air, Wall],
    [
        Wall, Wall, Wall, Wall, Wall, Wall, Wall, Air, Air, Air, Wall,
    ],
    [Wall, Air, Air, Air, Wall, Air, Wall, Air, Air, Air, Wall],
    [Wall, Air, Air, Air, Wall, Air, Air, Air, Air, Air, Wall],
    [Wall, Air, Air, Air, Air, Air, Wall, Air, Air, Air, Wall],
    [Wall, Air, Air, Air, Air, Air, Wall, Air, Air, Air, Wall],
    [Wall, Air, Air, Air, Air, Air, Wall, Air, Air, Air, Wall],
    [
        Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall,
    ],
];

enum Direction {
    Up,
    Down,
    Left,
    Right,
}

struct Player {
    direction: Direction,
    x: usize,
    y: usize,
}

enum Action {
    None,
    Moved,
    Rotated,
    HitWall,
    UnknowCommand,
}

fn main() {
    let mut player = Player {
        direction: Direction::Down,
        x: 1,
        y: 1,
    };
    let mut last_action = Action::None;
    loop {
        let d = match player.direction {
            Direction::Left => [
                (-3, 2),
                (-3, -2),
                (-3, 1),
                (-3, -1),
                (-3, 0),
                (-2, 1),
                (-2, -1),
                (-2, 0),
                (-1, 1),
                (-1, -1),
                (-1, 0),
                (0, 1),
                (0, -1),
            ],
            Direction::Right => [
                (3, -2),
                (3, 2),
                (3, -1),
                (3, 1),
                (3, 0),
                (2, -1),
                (2, 1),
                (2, 0),
                (1, -1),
                (1, 1),
                (1, 0),
                (0, -1),
                (0, 1),
            ],
            Direction::Up => [
                (-2, -3),
                (2, -3),
                (-1, -3),
                (1, -3),
                (0, -3),
                (-1, -2),
                (1, -2),
                (0, -2),
                (-1, -1),
                (1, -1),
                (0, -1),
                (-1, 0),
                (1, 0),
            ],
            Direction::Down => [
                (2, 3),
                (-2, 3),
                (1, 3),
                (-1, 3),
                (0, 3),
                (1, 2),
                (-1, 2),
                (0, 2),
                (1, 1),
                (-1, 1),
                (0, 1),
                (1, 0),
                (-1, 0),
            ],
        };

        let mut frame = [[' '; 26]; 14];
        for (i, (dx, dy)) in d.into_iter().enumerate() {
            let x = player.x.checked_add_signed(dx);
            let y = player.y.checked_add_signed(dy);
            let block = match (x, y) {
                (Some(x), Some(y)) if x < WIDTH && y < HEIGHT => MAP[y][x],
                _ => Block::Wall,
            };
            let pattern = match block {
                Block::Wall => PATTERNS[i],
                _ => continue,
            };
            for (i, line) in pattern.lines().enumerate() {
                for (j, char) in line.chars().enumerate() {
                    if char != '`' {
                        frame[i][j] = char;
                    }
                }
            }
        }
        print!("\x1Bc");
        for line in frame {
            for char in line {
                print!("{}", char);
            }
            println!();
        }

        match last_action {
            Action::None => {}
            Action::Rotated => {}
            Action::Moved => {}
            Action::HitWall => println!("You hit a wall!"),
            Action::UnknowCommand => println!("Unknow command. Try again!"),
        }

        let n: String = input!(":> ").to_lowercase();
        last_action = match n.as_str() {
            "d" | "right" => {
                player.direction = match player.direction {
                    Direction::Left => Direction::Up,
                    Direction::Right => Direction::Down,
                    Direction::Up => Direction::Right,
                    Direction::Down => Direction::Left,
                };
                Action::Rotated
            }
            "a" | "left" => {
                player.direction = match player.direction {
                    Direction::Left => Direction::Down,
                    Direction::Right => Direction::Up,
                    Direction::Up => Direction::Left,
                    Direction::Down => Direction::Right,
                };
                Action::Rotated
            }
            "w" | "forward" => {
                let (dx, dy) = match player.direction {
                    Direction::Right => (1, 0),
                    Direction::Left => (-1, 0),
                    Direction::Up => (0, -1),
                    Direction::Down => (0, 1),
                };
                let x = player.x.checked_add_signed(dx);
                let y = player.y.checked_add_signed(dy);
                let block = match (x, y) {
                    (Some(x), Some(y)) if x < WIDTH && y < HEIGHT => MAP[y][x],
                    _ => Block::Wall,
                };
                match block {
                    Block::Air => {
                        player.x = x.unwrap();
                        player.y = y.unwrap();
                        Action::Moved
                    }
                    Block::Wall => Action::HitWall,
                }
            }
            _ => Action::UnknowCommand,
        }
    }
}
